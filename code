#load in necessary libraries
library(tidyverse)
library(ggplot2)
library(dplyr)

# Question 1

# Part A
# Create a histogram to display the overall data distribution of course evaluation scores.
# Load required libraries

profs <- read.csv("profs.csv")

# Histogram of course evaluation scores
ggplot(profs, aes(x = eval)) +
  geom_histogram(binwidth = 0.2, fill = "skyblue", color = "black") +
  labs(
    title = "Distribution of Course Evaluation Scores",
    x = "Evaluation Score",
    y = "Frequency"
  ) +
  theme_minimal()

# Part B
# Use side-by-side boxplots to show the distribution of course evaluation scores by whether or not the
# professor is a native English speaker.

# Side-by-side boxplots
ggplot(profs, aes(x = native, y = eval, fill = native)) +
  geom_boxplot() +
  scale_fill_manual(values = c("orange", "purple")) +
  labs(
    title = "Evaluation Scores by Native English Speaker Status",
    x = "Native English Speaker",
    y = "Evaluation Score"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

# Part C
# Use a faceted histogram with two rows to compare the distribution of course evaluation scores for
# male and female instructors.

# Faceted histogram by gender
ggplot(profs, aes(x = eval)) +
  geom_histogram(binwidth = 0.2, fill = "lightgreen", color = "black") +
  facet_wrap(~ gender, nrow = 2) +
  labs(
    title = "Distribution of Evaluation Scores by Gender",
    x = "Evaluation Score",
    y = "Frequency"
  ) +
  theme_minimal()

# Part D
# Create a scatterplot to visualize the extent to which there may be an association between the
# professor’s physical attractiveness (x) and their course evaluations (y).
# Scatterplot of beauty vs. evaluation scores
ggplot(profs, aes(x = beauty, y = eval)) +
  geom_point(alpha = 0.5, color = "blue") +
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  labs(
    title = "Relationship Between Physical Attractiveness and Evaluation Scores",
    x = "Physical Attractiveness (Standardized)",
    y = "Evaluation Score"
  ) +
  theme_minimal()

#Question 2

# Read the dataset
bikeshare <- read.csv("bikeshare.csv")

# Part A

# Calculate average hourly bike rentals
avg_hourly_rentals <- bikeshare %>%
  group_by(hr) %>%
  summarize(avg_rentals = mean(total), .groups = "drop")

# Create the line plot
ggplot(avg_hourly_rentals, aes(x = hr, y = avg_rentals)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "Average Hourly Bike Rentals",
    x = "Hour of the Day (24-hour format)",
    y = "Average Rentals",
  ) +
  theme_minimal()

# Part B

# Calculate average hourly rentals by working day
avg_hourly_workingday <- bikeshare %>%
  group_by(hr, workingday) %>%
  summarize(avg_rentals = mean(total), .groups = "drop")

# Create the faceted line plot
ggplot(avg_hourly_workingday, aes(x = hr, y = avg_rentals, color = factor(workingday))) +
  geom_line(size = 1) +
  facet_wrap(~workingday, labeller = as_labeller(c(`0` = "Non-Working Day", `1` = "Working Day"))) +
  labs(
    title = "Average Hourly Bike Rentals by Working Day",
    x = "Hour of the Day (24-hour format)",
    y = "Average Rentals",
    color = "Working Day",
  ) +
  theme_minimal()

# Part C

# Filter data for 9 AM and calculate average rentals by weather situation
avg_9am_rentals <- bikeshare %>%
  filter(hr == 9) %>%
  group_by(weathersit, workingday) %>%
  summarize(avg_rentals = mean(total), .groups = "drop")

# Create the faceted bar plot
ggplot(avg_9am_rentals, aes(x = factor(weathersit), y = avg_rentals, fill = factor(weathersit))) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~workingday, labeller = as_labeller(c(`0` = "Non-Working Day", `1` = "Working Day"))) +
  labs(
    title = "Average Ridership at 9 AM by Weather Situation",
    x = "Weather Situation",
    y = "Average Rentals",
    fill = "Weather Situation",
  ) +
  scale_x_discrete(
    labels = c(
      `1` = "Clear",
      `2` = "Cloudy",
      `3` = "Light Rain/Snow",
      `4` = "Heavy Rain/Snow"
    )
  ) +
  theme_minimal()

#Question 3

# Read the dataset
capmetro_UT <- read.csv("capmetro_UT.csv")

# Recode categorical variables
capmetro_UT <- mutate(
  capmetro_UT,
  day_of_week = factor(day_of_week, levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")),
  month = factor(month, levels = c("Sep", "Oct", "Nov"))
)

# Part A

# Calculate average boardings
avg_boardings <- capmetro_UT %>%
  group_by(day_of_week, month, hour_of_day) %>%
  summarize(mean_boarding = mean(boarding, na.rm = TRUE))

ggplot(avg_boardings, aes(x = hour_of_day, y = mean_boarding, color = month)) +
  geom_line(size = 1) +
  facet_wrap(~ day_of_week, nrow = 1) +
  labs(
    title = "Average Boardings by Hour of Day, Day of Week, and Month",
    x = "Hour of Day",
    y = "Average Boardings",
    color = "Month"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  )

# Part B

ggplot(capmetro_UT, aes(x = temperature, y = boarding, color = weekend)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~ hour_of_day, nrow = 4) +
  labs(
    title = "Boardings vs. Temperature, by Hour of Day and Weekend Status",
    x = "Temperature (°F)",
    y = "Boardings",
    color = "Weekend"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom"
  )

#Question 4

# Load the dataset
billboard <- read.csv("billboard.csv")

# Part A 

# Find the top 10 most popular songs
top_songs <- billboard %>%
  group_by(performer, song) %>%
  summarize(count = n(), .groups = "drop") %>%
  arrange(desc(count)) %>%
  slice_head(n = 10)

# Display the table
top_songs

# Part B

# Filter data and calculate musical diversity
musical_diversity <- billboard %>%
  filter(year > 1958 & year < 2021) %>%
  group_by(year) %>%
  summarize(unique_songs = n_distinct(song), .groups = "drop")

# Plot the musical diversity over time
ggplot(musical_diversity, aes(x = year, y = unique_songs)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "Musical Diversity of the Billboard Top 100 Over Time",
    x = "Year",
    y = "Number of Unique Songs",
    caption = "Excludes partial data for 1958 and 2021"
  ) +
  theme_minimal()

# Part C

# Filter songs that are "ten-week hits"
ten_week_hits <- billboard %>%
  group_by(performer, song) %>%
  summarize(weeks_on_chart = n(), .groups = "drop") %>%
  filter(weeks_on_chart >= 10)

# Count the number of ten-week hits per performer
artist_hits <- ten_week_hits %>%
  group_by(performer) %>%
  summarize(ten_week_hits = n(), .groups = "drop") %>%
  filter(ten_week_hits >= 30) %>%
  arrange(desc(ten_week_hits))

# Plot the bar chart
ggplot(artist_hits, aes(x = reorder(performer, -ten_week_hits), y = ten_week_hits)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Artists with 30+ Ten-Week Hits on the Billboard Top 100",
    x = "Performer",
    y = "Number of Ten-Week Hits",
    caption = "A 'ten-week hit' is defined as a song appearing for at least 10 weeks."
  ) +
  theme_minimal()
